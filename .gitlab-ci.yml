stages:
  - build
  - test
  - deploy

build-job:
  image: docker:latest
  stage: build
  services:
    - docker:19.03.0-dind
  only:
    - feature/cicd2
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    TAG_LATEST: $CI_REGISTRY_IMAGE:latest
    TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_REF_SHORT_SHA

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  script:
    - docker-compose build
    - docker image ls -a
    - echo $TAG_LATEST
    #registry.gitlab.com/alifalahati/reminders/reminder_nginx:latest
    - docker tag reminders-nginx $CI_REGISTRY_IMAGE/reminders_nginx:latest
    - docker tag reminders-backend $CI_REGISTRY_IMAGE/reminders_backend:latest
    - docker tag reminders-scheduler $CI_REGISTRY_IMAGE/reminders_scheduler:latest
    - docker push $CI_REGISTRY_IMAGE/reminders_nginx:latest
    - docker push $CI_REGISTRY_IMAGE/reminders_backend:latest
    - docker push $CI_REGISTRY_IMAGE/reminders_scheduler:latest

unit-test-job:
  image: docker:latest
  stage: test
  only:
    - feature/cicd2
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 1
    - echo "Code coverage is 90%"

lint-test-job: # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  only:
    - feature/cicd2
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."


deploy:
  image: alpine:latest
  stage: deploy
  only:
    - feature/cicd
  script:
    - chmod og= $ID_RSA
    - ls
    - pwd
    - ip a 
    - echo $SERVER_IP
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker-compose -f docker-compose-prod.yml up -d"


#deploy-job:
#  image: docker:latest
#  stage: deploy
#  services:
#    - docker:19.03.0-dind
#  only:
#    - feature/cicd
#  environment: production
#  script:
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - echo "Deploying application..."
#    - cp .env.example .env
#    - docker-compose -f docker-compose-prod.yml pull
#    - docker-compose -f docker-compose-prod.yml up -d
#    - echo "Application successfully deployed."
